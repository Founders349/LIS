#!/usr/bin/env python
import random
# Randomly generates a map size
def diceRoll(Nsides):
    roll=random.randint(1,Nsides)
    return(roll)
def get_map_size():
    num_of_tiles = 0
    while num_of_tiles == 0:
        mapsize = input('Enter S/M/L: ')
        if mapsize == 'S':
            num_of_tiles = random.randrange(25, 35)
            print("The Map is", num_of_tiles, "Tiles")
            return num_of_tiles
        elif mapsize == 'M':
            num_of_tiles = random.randrange(40, 60)
            print("The Map is", num_of_tiles, "Tiles")
            return num_of_tiles
        elif mapsize == 'L':
            num_of_tiles = random.randrange(80, 100)
            print("The Map is", num_of_tiles, "Tiles")
            return num_of_tiles

# stores the map size so we can make the map
num_of_tiles = get_map_size()
def map_step_one():
    if num_of_tiles < 36:
        rows, cols = (7,7)
        return rows, cols
    elif 36 < num_of_tiles < 61:
        rows, cols = (9,9)
        return rows, cols
    else:
        rows, cols = (12,12)
        return rows, cols
rows, cols = map_step_one()

def map_step_two():
    arr = [[0 for i in range(cols)] for j in range(rows)]
    return arr

# Creates the rooms... hopefully
class Room:

    def __init__(self):
        num_of_sides = random.randrange(0,4)

        pass

class Medbay(Room):
    room_type = "Medbay"
    room_ID = 1


class Armory(Room):
    room_type = "Armory"
    room_ID = 2


class Storage(Room):
    room_type = "Storage"
    room_ID = 3


class Security(Room):
    room_type = "Security"
    room_ID = 4

class Airlock(Room):
    room_type = "Airlock"
    room_ID = 5


class Lab(Room):
    room_type = "Lab"
    room_ID = 6

# defines Playable Characters
class Human:

    health = 50
    isdead = False
    will_move = "N"
    will_search = "N"
    will_interact = "N"
    # initializes character with character stats
    def __init__(self, strength, AC, WS, BS):
        self.strength = strength
        self.AC = AC
        self.WS = WS
        self.BS = BS

    def isdead(self):
        if (self.health <= 0):
            self.isdead = True

# subclasses of Human
class Engineer(Human):
    equiptment = "maintenance tool"
    skill = "Override"
class Doctor(Human):
    equiptment = "Meds"
    equiptment_amount = 2
    skill = "PHD", "Blood Timer"
class Veteran(Human):
    equiptment = "Deagle"
    skill = "Pilot"
class Technician(Human):
    pass
class Chemist(Human):
    pass
class Astronaut(Human):
    pass
class Delegate(Human):
    pass


# basic attack setup
def attack(name, damage):
    name.health = (name.health - damage)
    return name.health
# Start turn based functions
# Asks player to see if they will move
def check_Move(name):
    case = 0
    while case == 0:
        will_move = input("Will you move? Y/N ")
        if will_move == "Y":
            name.will_move = "Y"
            break
        elif will_move == "N":
            name.will_move = "N"
            break
        else:
            name.will_move = "N"
    return name.will_move
# Asks player if they will search the room
def check_Search(name):
    will_search = input("Will you search your current room? Y/N ")
    if will_search == "Y":
        name.will_search = "Y"
    elif will_search == "N":
        name.will_search = "N"
    else:
        name.will_search = "N"
    return name.will_search
# Asks the player if they want to interact with the room
def check_Interact(name):
    will_interact = input("Will you interact with the current room? Y/N ")
    if will_interact == "Y":
        name.will_interact = "Y"
    elif will_interact == "N":
        name.will_interact = "N"
    else:
        name.will_interact = "N"
    return name.will_interact

# def run_Turn(name):
    # pass

    # will_attack = input("Will you attack? Y/N")
    # if (will_attack == "Y"):
    #    print("Okay")

# tests all my code
def main():
    print(num_of_tiles)
    engineer_1 = Engineer(20,12,10,10)
    attack(engineer_1, 10)
    print(engineer_1.health)
    attack(engineer_1, 60)
    print(engineer_1.health)
    engineer_1.isdead()
    print(engineer_1.isdead)
    check_Move(engineer_1)
    print(engineer_1.will_move)
    print(engineer_1.strength)
    print(engineer_1.AC)
    print(engineer_1.WS)
    print(engineer_1.BS)
    print(diceRoll(6))
    print(map_step_two())


main()
